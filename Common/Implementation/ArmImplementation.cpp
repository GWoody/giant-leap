/*
===============================================================================

	Giant Leap

	File	:	ArmImplementation.cpp
	Authors	:	Gareth Woodorth
	Date	:   9th September 2014

	Purpose	:	Implements the Giant Leap version of the `Arm` Leap SDK class.

===============================================================================
*/

#include "Common.h"

#include "GiantLeap.h"
#include "ArmImplementation.h"

using namespace GiantLeap;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
ArmImplementation::ArmImplementation()
{
	
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
float ArmImplementation::width() const
{
	return 0;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Leap::Vector ArmImplementation::direction() const
{
	return Leap::Vector(0, 0, 0);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Leap::Matrix ArmImplementation::basis() const
{
	breakpoint();
	return Leap::Matrix();
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Leap::Vector ArmImplementation::elbowPosition() const
{
	return Leap::Vector(0,0,0);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Leap::Vector ArmImplementation::wristPosition() const
{
	return Leap::Vector(0, 0, 0);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
bool ArmImplementation::isValid() const
{
	return true;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
const Arm& ArmImplementation::invalid()
{
	static Arm invalid(NULL);
	return invalid;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
bool ArmImplementation::operator==(const Arm& other) const
{
	return true;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
bool ArmImplementation::operator!=(const Arm& other) const
{
	return true;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
const char* ArmImplementation::toCString() const
{
	breakpoint();
	return "";
}